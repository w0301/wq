cmake_minimum_required(VERSION 2.6)
project(wq)

# Version of library will be divided into 3 parts. Names describe them enough.
set(WQ_MAJOR_VERSION 0)
set(WQ_MINOR_VERSION 0)
set(WQ_MAINTENANCE_VERSION 0)
set(WQ_FULL_VERSION "${WQ_MAJOR_VERSION}.${WQ_MINOR_VERSION}.${WQ_MAINTENANCE_VERSION}")

# Setting of libs platform.
if(UNIX)
    set(WQ_UNIX 1)
elseif(WIN32)
    set(WQ_WINDOWS 1)
endif(UNIX)

# We will set the default build mode - of course to Release mode.
if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Release CACHE STRING
		"Choose the mode of your build, options are: None Debug Release RelWithDebInfo MinSizeRel."
		FORCE)
endif(NOT CMAKE_BUILD_TYPE)

# Now we are setting libraries type - shared or static.
if(NOT BUILD_SHARED_LIBS)
	set(BUILD_SHARED_LIBS true CACHE BOOL
		"Choose what kind of libraries do you want to build: true means shared (default) and false means static."
		FORCE)
endif(NOT BUILD_SHARED_LIBS)
set(WQ_SHARED_LIBS ${BUILD_SHARED_LIBS})

# Adding option to build samples or not.
option(WQ_BUILD_SAMPLES "Select to ON if you wish to build sample programs. Default is OFF." OFF)

# Adding option to turn STD libraries compatibility on/off.
option(WQ_STD_COMPATIBILITY "Select to ON if you wish to turn STD compatibilitu ON. Default is OFF." OFF)

# Variable which contains suffix which will be added to all built libraries.
set(WQ_OUTPUT_LIBS_PATH "${PROJECT_BINARY_DIR}/lib/")

# Variable which contains path where will all libraries reside after build.
set(WQ_OUTPUT_LIBS_SUFFIX "")
if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
	set(WQ_OUTPUT_LIBS_SUFFIX "d")
endif(${CMAKE_BUILD_TYPE} STREQUAL "Debug")

# Variable which contains names and paths of all libraries built by cmake.
# This variable should be changed by all CMakeLists.txt files that build library.
set(WQ_BUILT_LIBS "")

# Generating of config file for wq framework.
configure_file("${PROJECT_SOURCE_DIR}/include/config.h.in" "${PROJECT_BINARY_DIR}/include/wq/config.h")

# Here we are setting directories where our headers will reside. We will also have
# some autogenerated headers so we add 2. path (it also allows out-of-source build).
include_directories("${PROJECT_SOURCE_DIR}/include/" "${PROJECT_BINARY_DIR}/include/")

# Setting of linker to find our libraries.
link_directories("${WQ_OUTPUT_LIBS_PATH}")

# Setting output dir for libraries.
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${WQ_OUTPUT_LIBS_PATH}")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${WQ_OUTPUT_LIBS_PATH}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${WQ_OUTPUT_LIBS_PATH}")

# We will set names of output libraries here - we need them for samples too.
set(WQ_CORE_LIB_NAME "wqCore${WQ_OUTPUT_LIBS_SUFFIX}")

# Now we are adding subdirectory, where are our sources located.
add_subdirectory(src/)

# We will add subdirectory for samples only if we want to build them.
if(WQ_BUILD_SAMPLES)
	add_subdirectory(samples/)
endif(WQ_BUILD_SAMPLES)

# At the end setting installing commands would be great idea :).
# Install commands for libraries are in the CMakeLists.txt files in src/ subdirectory.
if(UNIX)
	# headers
	install(DIRECTORY "${PROJECT_SOURCE_DIR}/include/wq/" DESTINATION "include/wq" FILES_MATCHING PATTERN "*.h")
	# and config header
	install(FILES "${PROJECT_BINARY_DIR}/include/wq/config.h" DESTINATION "include/wq")
else(NOT UNIX)
	# TODO: Windows destination dirs will be more complex.
endif(UNIX)

